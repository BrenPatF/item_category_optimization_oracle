
Database             Time                 Version
-------------------- -------------------- ------------------------------
Start: ORCL          10-JUN-2024 23:39:03 Version 21.3.0.0.0

Recompile item_cat_seqs.pkb

Package body created.

No errors.
Just set context values: SEQ_SIZE = 11, MAX_PRICE = 890, ITEM_WIDTH = 3, TOP_N = 10
Previously set context values: SEQ_TYPE = , MIN_VALUE = 1952, KEEP_NUM = 300

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

Pop_Table_Iterate
old   2:   Item_Cat_Seqs.Pop_Table_Iterate(p_keep_num      => &KEEP_NUM,
new   2:   Item_Cat_Seqs.Pop_Table_Iterate(p_keep_num      => 0,
old   3:                                   p_min_value     => &MIN_VALUE);
new   3:                                   p_min_value     => 1952);
10 running sums
SQL_ID  323bar13mrwwy, child number 0
-------------------------------------
INSERT /*+ gather_plan_statistics INSERT_PATHS */ INTO PATHS (
PATH_RNK, ITEM_RNK, LEV, TOT_PRICE, TOT_VALUE, CAT_ID, NEXT_CAT_ID,
SAME_CATS, MIN_ITEMS, CATS_PATH, PATH ) WITH PATH_JOIN AS ( SELECT
ROW_NUMBER() OVER (PARTITION BY TRW.CATS_PATH || IRK.CAT_ID ORDER BY
TRW.TOT_VALUE + IRK.ITEM_VALUE DESC, TRW.TOT_PRICE + IRK.ITEM_PRICE)
PATH_RNK, IRK.ITEM_RNK, :B6 LEV, TRW.TOT_PRICE + IRK.ITEM_PRICE
TOT_PRICE, TRW.TOT_VALUE + IRK.ITEM_VALUE TOT_VALUE, IRK.CAT_ID,
IRK.NEXT_CAT_ID, CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN TRW.SAME_CATS + 1
ELSE 1 END SAME_CATS, IRK.MIN_ITEMS, TRW.CATS_PATH || IRK.CAT_ID
CATS_PATH, TRW.PATH || IRK.ITEM_ID PATH FROM PATHS TRW JOIN
ITEMS_RANKED IRK ON IRK.ITEM_RNK BETWEEN (TRW.ITEM_RNK + 1) AND
(IRK.N_ITEMS - (:B1 - TRW.LEV - 1)) WHERE TRW.TOT_PRICE +
IRK.ITEM_PRICE + :B5 <= :B4 AND TRW.TOT_VALUE + IRK.ITEM_VALUE + :B3 >=
:B2 AND TRW.LEV < :B1 AND CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN
TRW.SAME_CATS + 1 ELSE 1 END <= IRK.MAX_ITEMS AND :B1 - (TRW.LEV + 1) +
LEAST(CAS
Plan hash value: 2684864324
----------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                | Name               | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem | Used-Tmp|
----------------------------------------------------------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT         |                    |      1 |        |      0 |00:00:35.61 |     919K|       |       |          |         |
|   1 |  LOAD TABLE CONVENTIONAL | PATHS              |      1 |        |      0 |00:00:35.61 |     919K|       |       |          |         |
|*  2 |   VIEW                   |                    |      1 |      1 |    389K|00:00:35.38 |     889K|       |       |          |         |
|   3 |    WINDOW SORT           |                    |      1 |      1 |    389K|00:00:35.20 |     889K|    82M|  3117K|   73M (0)|         |
|   4 |     NESTED LOOPS         |                    |      1 |      1 |    389K|00:00:07.07 |     889K|       |       |          |         |
|*  5 |      TABLE ACCESS FULL   | PATHS              |      1 |      1 |    864K|00:00:00.13 |   15142 |       |       |          |         |
|*  6 |      INDEX RANGE SCAN    | SYS_IOT_TOP_177213 |    864K|      1 |    389K|00:00:32.22 |     874K|       |       |          |         |
----------------------------------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
2 - filter(("PATH_RNK"<=:B7 OR :B7=0))
5 - filter("TRW"."LEV"<:B1)
6 - access("IRK"."ITEM_RNK">="TRW"."ITEM_RNK"+1)
filter(("TRW"."TOT_PRICE"+"IRK"."ITEM_PRICE"+:B5<=:B4 AND "TRW"."TOT_VALUE"+"IRK"."ITEM_VALUE"+:B3>=:B2 AND
"IRK"."ITEM_RNK"<="IRK"."N_ITEMS"-(:B1-"TRW"."LEV"-1) AND "IRK"."MAX_ITEMS">=CASE "IRK"."CAT_ID" WHEN "TRW"."CAT_ID" THEN
"TRW"."SAME_CATS"+1 ELSE 1 END  AND "IRK"."MIN_REMAIN"<=:B1-("TRW"."LEV"+1)+LEAST(CASE "IRK"."CAT_ID" WHEN "TRW"."CAT_ID" THEN
"TRW"."SAME_CATS"+1 ELSE 1 END ,"IRK"."MIN_ITEMS") AND ("IRK"."CAT_ID"="TRW"."CAT_ID" OR "TRW"."SAME_CATS">="TRW"."MIN_ITEMS") AND
("IRK"."CAT_ID"="TRW"."CAT_ID" OR "IRK"."CAT_ID"=NVL("TRW"."NEXT_CAT_ID","IRK"."CAT_ID"))))
Note
-----
- dynamic statistics used: dynamic sampling (level=2)
Timer Set: Pop_Table_Iterate, Constructed at 10 Jun 2024 23:39:03, written at 23:40:24
======================================================================================
Timer                        Elapsed         CPU       Calls       Ela/Call       CPU/Call
------------------------  ----------  ----------  ----------  -------------  -------------
Initial delete (0)              0.01        0.01           1        0.00900        0.01000
Initial insert (1)              0.00        0.00           1        0.00000        0.00000
Insert paths 1 (17)             0.00        0.00           1        0.00000        0.00000
Delete paths 1 (1)              0.00        0.00           1        0.00000        0.00000
Insert paths 2 (290)            0.00        0.01           1        0.00400        0.01000
Delete paths 2 (17)             0.00        0.00           1        0.00000        0.00000
Insert paths 3 (553)            0.03        0.02           1        0.03100        0.02000
Delete paths 3 (290)            0.00        0.00           1        0.00000        0.00000
Insert paths 4 (279)            0.06        0.06           1        0.05600        0.06000
Delete paths 4 (553)            0.00        0.00           1        0.00000        0.00000
Insert paths 5 (1252)           0.03        0.03           1        0.03100        0.03000
Delete paths 5 (279)            0.00        0.00           1        0.00000        0.00000
Insert paths 6 (15349)          0.12        0.11           1        0.12000        0.11000
Delete paths 6 (1252)           0.00        0.01           1        0.00200        0.01000
Insert paths 7 (110100)         1.19        1.12           1        1.18700        1.12000
Delete paths 7 (15349)          0.02        0.01           1        0.01500        0.01000
Insert paths 8 (460638)         6.32        6.11           1        6.31600        6.11000
Delete paths 8 (110100)         0.11        0.07           1        0.10700        0.07000
Insert paths 9 (864748)        21.31       20.49           1       21.31400       20.49000
Delete paths 9 (460638)         0.41        0.30           1        0.41000        0.30000
Insert paths 10 (389615)       35.84       35.50           1       35.83500       35.50000
Delete paths 10 (864748)        0.68        0.42           1        0.67900        0.42000
Insert paths 11 (50)           14.29       14.24           1       14.29100       14.24000
Delete paths 11 (389615)        0.31        0.22           1        0.30500        0.22000
(Other)                         0.00        0.00           1        0.00000        0.00000
------------------------  ----------  ----------  ----------  -------------  -------------
Total                          80.71       78.73          25        3.22848        3.14920
------------------------  ----------  ----------  ----------  -------------  -------------
[Timer timed (per call in ms): Elapsed: 0.00952, CPU: 0.01143]

PL/SQL procedure successfully completed.


Path                              Total Value Total Price  Rank
--------------------------------- ----------- ----------- -----
037024160463488298027452193344166        1965         889     1
037024160264488298045027452193166                     890     2
037024160463488298044027452193344        1963         890     3
037024160463488298044027452193166        1962         884     4
037024160264488298314027452193166                     885     5
037024160272488298044027452193166                     889     6
252024160264488298044027452193166        1959         889     7
037024160463488298045027452193344        1958         887     8
037024160463488298045027452193166        1957         881     9
037024160463488298314027452328166                     886    10

10 rows selected.


PL/SQL procedure successfully completed.

Solutions by Category

Total Value Total Price  Rank Position Min Actual  Max Player List
----------- ----------- ----- -------- --- ------- --- -------------------------
       1965         889     1 DF       3    <-3    5   024, 160, 463
                              FW       1      2    3   488, 298
                              GK       1    <-1->  1   037
                              MF       2      5->  5   027, 452, 193, 344, 166
                    890     2 DF       3    <-3    5   024, 160, 264
                              FW       1      3->  3   488, 298, 045
                              GK       1    <-1->  1   037
                              MF       2      4    5   027, 452, 193, 166
       1963         890     3 DF       3    <-3    5   024, 160, 463
                              FW       1      3->  3   488, 298, 044
                              GK       1    <-1->  1   037
                              MF       2      4    5   027, 452, 193, 344
       1962         884     4 DF       3    <-3    5   024, 160, 463
                              FW       1      3->  3   488, 298, 044
                              GK       1    <-1->  1   037
                              MF       2      4    5   027, 452, 193, 166
                    885     5 DF       3    <-3    5   024, 160, 264
                              FW       1      3->  3   488, 298, 314
                              GK       1    <-1->  1   037
                              MF       2      4    5   027, 452, 193, 166
                    889     6 DF       3    <-3    5   024, 160, 272
                              FW       1      3->  3   488, 298, 044
                              GK       1    <-1->  1   037
                              MF       2      4    5   027, 452, 193, 166
       1959         889     7 DF       3    <-3    5   024, 160, 264
                              FW       1      3->  3   488, 298, 044
                              GK       1    <-1->  1   252
                              MF       2      4    5   027, 452, 193, 166
       1958         887     8 DF       3    <-3    5   024, 160, 463
                              FW       1      3->  3   488, 298, 045
                              GK       1    <-1->  1   037
                              MF       2      4    5   027, 452, 193, 344
       1957         881     9 DF       3    <-3    5   024, 160, 463
                              FW       1      3->  3   488, 298, 045
                              GK       1    <-1->  1   037
                              MF       2      4    5   027, 452, 193, 166
                    886    10 DF       3    <-3    5   024, 160, 463
                              FW       1      3->  3   488, 298, 314
                              GK       1    <-1->  1   037
                              MF       2      4    5   027, 452, 328, 166

40 rows selected.


PL/SQL procedure successfully completed.

Pop_Table_Iterate_Base
old   2:   Item_Cat_Seqs.Pop_Table_Iterate_Base(p_keep_num      => &KEEP_NUM,
new   2:   Item_Cat_Seqs.Pop_Table_Iterate_Base(p_keep_num      => 0,
old   3:                                        p_min_value     => &MIN_VALUE);
new   3:                                        p_min_value     => 1952);
10 running sums
SQL_ID  3qrdzuqh0vtjf, child number 0
-------------------------------------
INSERT /*+ gather_plan_statistics INSERT_PATHS */ INTO PATHS_BASE (
PATH_RNK, ITEM_RNK, LEV, TOT_PRICE, TOT_VALUE, CAT_BASE_ID,
NEXT_CAT_BASE_ID, SAME_CATS, MIN_ITEMS, CAT_BASE_SUM, PATH ) WITH
PATH_JOIN AS ( SELECT ROW_NUMBER() OVER (PARTITION BY TRW.CAT_BASE_SUM
+ IRK.CAT_BASE_ID ORDER BY TRW.TOT_VALUE + IRK.ITEM_VALUE DESC,
TRW.TOT_PRICE + IRK.ITEM_PRICE) PATH_RNK, IRK.ITEM_RNK, :B6 LEV,
TRW.TOT_PRICE + IRK.ITEM_PRICE TOT_PRICE, TRW.TOT_VALUE +
IRK.ITEM_VALUE TOT_VALUE, IRK.CAT_BASE_ID, IRK.NEXT_CAT_BASE_ID, CASE
IRK.CAT_BASE_ID WHEN TRW.CAT_BASE_ID THEN TRW.SAME_CATS + 1 ELSE 1 END
SAME_CATS, IRK.MIN_ITEMS, TRW.CAT_BASE_SUM + IRK.CAT_BASE_ID
CAT_BASE_SUM, TRW.PATH || IRK.ITEM_ID PATH FROM PATHS_BASE TRW JOIN
ITEMS_RANKED_BASE IRK ON IRK.ITEM_RNK BETWEEN (TRW.ITEM_RNK + 1) AND
(IRK.N_ITEMS - (:B1 - TRW.LEV - 1)) WHERE TRW.TOT_PRICE +
IRK.ITEM_PRICE + :B5 <= :B4 AND TRW.TOT_VALUE + IRK.ITEM_VALUE + :B3 >=
:B2 AND TRW.LEV < :B1 AND CASE IRK.CAT_BASE_ID WHEN TRW.CAT_BASE_ID
THEN TRW.SA
Plan hash value: 2131628056
----------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                | Name               | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem | Used-Tmp|
----------------------------------------------------------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT         |                    |      1 |        |      0 |00:00:41.77 |     911K|       |       |          |         |
|   1 |  LOAD TABLE CONVENTIONAL | PATHS_BASE         |      1 |        |      0 |00:00:41.77 |     911K|       |       |          |         |
|*  2 |   VIEW                   |                    |      1 |      1 |    389K|00:00:41.51 |     887K|       |       |          |         |
|   3 |    WINDOW SORT           |                    |      1 |      1 |    389K|00:00:41.32 |     887K|    68M|  2869K|   61M (0)|         |
|   4 |     NESTED LOOPS         |                    |      1 |      1 |    389K|00:00:08.29 |     887K|       |       |          |         |
|*  5 |      TABLE ACCESS FULL   | PATHS_BASE         |      1 |      1 |    864K|00:00:00.20 |   12680 |       |       |          |         |
|*  6 |      INDEX RANGE SCAN    | SYS_IOT_TOP_177215 |    864K|      1 |    389K|00:00:37.83 |     874K|       |       |          |         |
----------------------------------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
2 - filter(("PATH_RNK"<=:B7 OR :B7=0))
5 - filter("TRW"."LEV"<:B1)
6 - access("IRK"."ITEM_RNK">="TRW"."ITEM_RNK"+1)
filter(("TRW"."TOT_PRICE"+"IRK"."ITEM_PRICE"+:B5<=:B4 AND "TRW"."TOT_VALUE"+"IRK"."ITEM_VALUE"+:B3>=:B2 AND
"IRK"."ITEM_RNK"<="IRK"."N_ITEMS"-(:B1-"TRW"."LEV"-1) AND "IRK"."MAX_ITEMS">=CASE "IRK"."CAT_BASE_ID" WHEN "TRW"."CAT_BASE_ID" THEN
"TRW"."SAME_CATS"+1 ELSE 1 END  AND "IRK"."MIN_REMAIN"<=:B1-("TRW"."LEV"+1)+LEAST(CASE "IRK"."CAT_BASE_ID" WHEN "TRW"."CAT_BASE_ID"
THEN "TRW"."SAME_CATS"+1 ELSE 1 END ,"IRK"."MIN_ITEMS") AND ("IRK"."CAT_BASE_ID"="TRW"."CAT_BASE_ID" OR
"TRW"."SAME_CATS">="TRW"."MIN_ITEMS") AND ("IRK"."CAT_BASE_ID"="TRW"."CAT_BASE_ID" OR
"IRK"."CAT_BASE_ID"=NVL("TRW"."NEXT_CAT_BASE_ID","IRK"."CAT_BASE_ID"))))
Note
-----
- dynamic statistics used: dynamic sampling (level=2)
Timer Set: Pop_Table_Iterate_Base, Constructed at 10 Jun 2024 23:40:24, written at 23:41:51
===========================================================================================
Timer                             Elapsed         CPU       Calls       Ela/Call       CPU/Call
-----------------------------  ----------  ----------  ----------  -------------  -------------
Initial delete (0)                   0.01        0.00           1        0.00900        0.00000
Initial insert (1)                   0.00        0.00           1        0.00000        0.00000
Insert paths_Base 1 (17)             0.00        0.00           1        0.00100        0.00000
Delete paths_Base 1 (1)              0.00        0.00           1        0.00000        0.00000
Insert paths_Base 2 (290)            0.00        0.00           1        0.00300        0.00000
Delete paths_Base 2 (17)             0.00        0.00           1        0.00000        0.00000
Insert paths_Base 3 (553)            0.03        0.03           1        0.03100        0.03000
Delete paths_Base 3 (290)            0.00        0.00           1        0.00100        0.00000
Insert paths_Base 4 (279)            0.06        0.06           1        0.05600        0.06000
Delete paths_Base 4 (553)            0.00        0.00           1        0.00000        0.00000
Insert paths_Base 5 (1252)           0.03        0.03           1        0.03200        0.03000
Delete paths_Base 5 (279)            0.00        0.00           1        0.00000        0.00000
Insert paths_Base 6 (15349)          0.13        0.12           1        0.12600        0.12000
Delete paths_Base 6 (1252)           0.00        0.00           1        0.00100        0.00000
Insert paths_Base 7 (110100)         1.08        1.07           1        1.07800        1.07000
Delete paths_Base 7 (15349)          0.01        0.01           1        0.01300        0.01000
Insert paths_Base 8 (460638)         6.30        6.13           1        6.30400        6.13000
Delete paths_Base 8 (110100)         0.08        0.09           1        0.07700        0.09000
Insert paths_Base 9 (864748)        21.34       20.51           1       21.33500       20.51000
Delete paths_Base 9 (460638)         0.27        0.25           1        0.27300        0.25000
Insert paths_Base 10 (389615)       42.01       39.00           1       42.00700       39.00000
Delete paths_Base 10 (864748)        0.57        0.43           1        0.56800        0.43000
Insert paths_Base 11 (50)           14.95       14.59           1       14.95400       14.59000
Delete paths_Base 11 (389615)        0.25        0.19           1        0.25300        0.19000
(Other)                              0.00        0.00           1        0.00000        0.00000
-----------------------------  ----------  ----------  ----------  -------------  -------------
Total                               87.12       82.51          25        3.48488        3.30040
-----------------------------  ----------  ----------  ----------  -------------  -------------
[Timer timed (per call in ms): Elapsed: 0.01000, CPU: 0.01000]

PL/SQL procedure successfully completed.


Path                              Total Value Total Price  Rank
--------------------------------- ----------- ----------- -----
037024160463488298027452193344166        1965         889     1
037024160264488298045027452193166                     890     2
037024160463488298044027452193344        1963         890     3
037024160463488298044027452193166        1962         884     4
037024160264488298314027452193166                     885     5
037024160272488298044027452193166                     889     6
252024160264488298044027452193166        1959         889     7
037024160463488298045027452193344        1958         887     8
037024160463488298045027452193166        1957         881     9
037024160272488298045027452193166                     886    10

10 rows selected.


PL/SQL procedure successfully completed.

Pop_Table_Iterate_Link
old   2:   Item_Cat_Seqs.Pop_Table_Iterate_Link(p_keep_num      => &KEEP_NUM,
new   2:   Item_Cat_Seqs.Pop_Table_Iterate_Link(p_keep_num      => 0,
old   3:                                        p_min_value     => &MIN_VALUE);
new   3:                                        p_min_value     => 1952);
10 running sums
SQL_ID  cyyssj0zrc1d8, child number 0
-------------------------------------
INSERT /*+ gather_plan_statistics INSERT_ILN */ INTO PATHS_LINK (
PATH_RNK, ITEM_RNK, LEV, TOT_PRICE, TOT_VALUE, CAT_ID, NEXT_CAT_ID,
SAME_CATS, MIN_ITEMS, CATS_PATH, PRIOR_ILN_ID, ILN_ID ) WITH PATH_JOIN
AS ( SELECT ROW_NUMBER() OVER (PARTITION BY TRW.CATS_PATH || IRK.CAT_ID
ORDER BY TRW.TOT_VALUE + IRK.ITEM_VALUE DESC, TRW.TOT_PRICE +
IRK.ITEM_PRICE) PATH_RNK, IRK.ITEM_RNK, :B7 LEV, TRW.TOT_PRICE +
IRK.ITEM_PRICE TOT_PRICE, TRW.TOT_VALUE + IRK.ITEM_VALUE TOT_VALUE,
IRK.CAT_ID, IRK.NEXT_CAT_ID, CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN
TRW.SAME_CATS + 1 ELSE 1 END SAME_CATS, IRK.MIN_ITEMS, TRW.CATS_PATH ||
IRK.CAT_ID CATS_PATH, TRW.ILN_ID FROM PATHS_LINK TRW JOIN
ITEMS_RANKED_LINK IRK ON IRK.ITEM_RNK BETWEEN (TRW.ITEM_RNK + 1) AND
(:B2 - (:B1 - TRW.LEV - 1)) WHERE TRW.TOT_PRICE + IRK.ITEM_PRICE + :B6
<= :B5 AND TRW.TOT_VALUE + IRK.ITEM_VALUE + :B4 >= :B3 AND TRW.LEV <
:B1 AND CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN TRW.SAME_CATS + 1 ELSE 1
END <= IRK.MAX_ITEMS AND :B1 - (TRW.LEV + 1) + LEAST(
Plan hash value: 441424830
----------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                | Name               | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem | Used-Tmp|
----------------------------------------------------------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT         |                    |      1 |        |      0 |00:00:36.39 |     903K|       |       |          |         |
|   1 |  LOAD TABLE CONVENTIONAL | PATHS_LINK         |      1 |        |      0 |00:00:36.39 |     903K|       |       |          |         |
|   2 |   SEQUENCE               | ILN_SEQ            |      1 |        |    389K|00:00:36.13 |     879K|       |       |          |         |
|*  3 |    VIEW                  |                    |      1 |      1 |    389K|00:00:35.61 |     879K|       |       |          |         |
|   4 |     WINDOW SORT          |                    |      1 |      1 |    389K|00:00:35.41 |     879K|    68M|  2865K|   60M (0)|         |
|   5 |      NESTED LOOPS        |                    |      1 |      1 |    389K|00:00:07.89 |     879K|       |       |          |         |
|*  6 |       TABLE ACCESS FULL  | PATHS_LINK         |      1 |      1 |    864K|00:00:00.15 |   12088 |       |       |          |         |
|*  7 |       INDEX RANGE SCAN   | SYS_IOT_TOP_177217 |    864K|      1 |    389K|00:00:32.40 |     867K|       |       |          |         |
----------------------------------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
3 - filter(("PATH_RNK"<=:B8 OR :B8=0))
6 - filter("TRW"."LEV"<:B1)
7 - access("IRK"."ITEM_RNK">="TRW"."ITEM_RNK"+1 AND "IRK"."ITEM_RNK"<=:B2-(:B1-"TRW"."LEV"-1))
filter(("TRW"."TOT_PRICE"+"IRK"."ITEM_PRICE"+:B6<=:B5 AND "TRW"."TOT_VALUE"+"IRK"."ITEM_VALUE"+:B4>=:B3 AND
"IRK"."MAX_ITEMS">=CASE "IRK"."CAT_ID" WHEN "TRW"."CAT_ID" THEN "TRW"."SAME_CATS"+1 ELSE 1 END  AND
"IRK"."MIN_REMAIN"<=:B1-("TRW"."LEV"+1)+LEAST(CASE "IRK"."CAT_ID" WHEN "TRW"."CAT_ID" THEN "TRW"."SAME_CATS"+1 ELSE 1 END
,"IRK"."MIN_ITEMS") AND ("IRK"."CAT_ID"="TRW"."CAT_ID" OR "TRW"."SAME_CATS">="TRW"."MIN_ITEMS") AND ("IRK"."CAT_ID"="TRW"."CAT_ID" OR
"IRK"."CAT_ID"=NVL("TRW"."NEXT_CAT_ID","IRK"."CAT_ID"))))
Note
-----
- dynamic statistics used: dynamic sampling (level=2)
Timer Set: Pop_Table_Iterate_Link, Constructed at 10 Jun 2024 23:41:51, written at 23:43:16
===========================================================================================
Timer                              Elapsed         CPU       Calls       Ela/Call       CPU/Call
------------------------------  ----------  ----------  ----------  -------------  -------------
Initial delete (0)                    0.01        0.01           1        0.00900        0.01000
Initial insert (1)                    0.00        0.00           1        0.00100        0.00000
Insert item_links  1 (1)              0.00        0.00           1        0.00000        0.00000
Insert paths_Link 1 (17)              0.00        0.00           1        0.00100        0.00000
Delete paths_Link 1 (1)               0.00        0.00           1        0.00000        0.00000
Insert item_links  2 (17)             0.00        0.00           1        0.00000        0.00000
Insert paths_Link 2 (290)             0.00        0.00           1        0.00400        0.00000
Delete paths_Link 2 (17)              0.00        0.00           1        0.00000        0.00000
Insert item_links  3 (290)            0.00        0.00           1        0.00000        0.00000
Insert paths_Link 3 (553)             0.03        0.04           1        0.03300        0.04000
Delete paths_Link 3 (290)             0.00        0.00           1        0.00000        0.00000
Insert item_links  4 (553)            0.00        0.00           1        0.00100        0.00000
Insert paths_Link 4 (279)             0.06        0.06           1        0.06400        0.06000
Delete paths_Link 4 (553)             0.00        0.00           1        0.00100        0.00000
Insert item_links  5 (279)            0.00        0.00           1        0.00000        0.00000
Insert paths_Link 5 (1252)            0.04        0.03           1        0.03800        0.03000
Delete paths_Link 5 (279)             0.00        0.00           1        0.00100        0.00000
Insert item_links  6 (1252)           0.00        0.00           1        0.00000        0.00000
Insert paths_Link 6 (15349)           0.16        0.16           1        0.15700        0.16000
Delete paths_Link 6 (1252)            0.00        0.00           1        0.00200        0.00000
Insert item_links  7 (15349)          0.01        0.01           1        0.00800        0.01000
Insert paths_Link 7 (110100)          1.29        1.27           1        1.29000        1.27000
Delete paths_Link 7 (15349)           0.01        0.02           1        0.01100        0.02000
Insert item_links  8 (110100)         0.03        0.03           1        0.03200        0.03000
Insert paths_Link 8 (460638)          6.55        6.53           1        6.55200        6.53000
Delete paths_Link 8 (110100)          0.07        0.06           1        0.06500        0.06000
Insert item_links  9 (460638)         0.15        0.14           1        0.14800        0.14000
Insert paths_Link 9 (864748)         23.91       22.96           1       23.91400       22.96000
Delete paths_Link 9 (460638)          0.26        0.23           1        0.25500        0.23000
Insert item_links  10 (864748)        0.31        0.30           1        0.31400        0.30000
Insert paths_Link 10 (389615)        36.63       36.31           1       36.63100       36.31000
Delete paths_Link 10 (864748)         0.45        0.40           1        0.45400        0.40000
Insert item_links  11 (389615)        0.16        0.16           1        0.16400        0.16000
Insert paths_Link 11 (50)            14.56       14.42           1       14.55500       14.42000
Delete paths_Link 11 (389615)         0.21        0.21           1        0.20500        0.21000
(Other)                               0.00        0.00           1        0.00000        0.00000
------------------------------  ----------  ----------  ----------  -------------  -------------
Total                                84.91       83.35          36        2.35861        2.31528
------------------------------  ----------  ----------  ----------  -------------  -------------
[Timer timed (per call in ms): Elapsed: 0.00877, CPU: 0.00965]

PL/SQL procedure successfully completed.


Path                              Total Value Total Price  Rank
--------------------------------- ----------- ----------- -----
037024160463488298027452193344166        1965         889     1
037024160264488298045027452193166                     890     2
037024160463488298044027452193344        1963         890     3
037024160463488298044027452193166        1962         884     4
037024160264488298314027452193166                     885     5
037024160272488298044027452193166                     889     6
252024160264488298044027452193166        1959         889     7
037024160463488298045027452193344        1958         887     8
037024160463488298045027452193166        1957         881     9
037024160272488298045027452193166                     886    10

10 rows selected.


PL/SQL procedure successfully completed.

old   2:      Item_Cat_Seqs.Set_Contexts(p_keep_num      => &KEEP_NUM,
new   2:      Item_Cat_Seqs.Set_Contexts(p_keep_num      => 0,
old   3:                                 p_min_value     => &MIN_VALUE);
new   3:                                 p_min_value     => 1952);
Just set context values: MIN_VALUE = 1952, KEEP_NUM = 0
Previously set context values: SEQ_TYPE = , SEQ_SIZE = 11, MAX_PRICE = 890, ITEM_WIDTH = 3, TOP_N = 10

PL/SQL procedure successfully completed.

paths_link_ranked_item_v - item level

Total Value Total Price  Rank Position Item Player                              Value      Price
----------- ----------- ----- -------- ---- ------------------------------ ---------- ----------
       1965         889     1 GK       037  Asmir Begovic                         154         56
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       463  Ryan Shawcross                        133         56
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       344  Miguel Michu                          169         79
                                       166  Marouane Fellaini                     168         73
                    890     2 GK       037  Asmir Begovic                         154         56
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       264  Glen Johnson                          141         65
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                                       045  Dimitar Berbatov                      161         71
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       166  Marouane Fellaini                     168         73
       1963         890     3 GK       037  Asmir Begovic                         154         56
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       463  Ryan Shawcross                        133         56
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                                       044  Christian Benteke                     166         74
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       344  Miguel Michu                          169         79
       1962         884     4 GK       037  Asmir Begovic                         154         56
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       463  Ryan Shawcross                        133         56
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                                       044  Christian Benteke                     166         74
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       166  Marouane Fellaini                     168         73
                    885     5 GK       037  Asmir Begovic                         154         56
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       264  Glen Johnson                          141         65
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                                       314  Romelu Lukaku                         158         66
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       166  Marouane Fellaini                     168         73
                    889     6 GK       037  Asmir Begovic                         154         56
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       272  Sanchez Jose Enrique                  133         61
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                                       044  Christian Benteke                     166         74
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       166  Marouane Fellaini                     168         73
       1959         889     7 GK       252  Jussi Jaaskelainen                    143         52
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       264  Glen Johnson                          141         65
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                                       044  Christian Benteke                     166         74
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       166  Marouane Fellaini                     168         73
       1958         887     8 GK       037  Asmir Begovic                         154         56
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       463  Ryan Shawcross                        133         56
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                                       045  Dimitar Berbatov                      161         71
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       344  Miguel Michu                          169         79
       1957         881     9 GK       037  Asmir Begovic                         154         56
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       463  Ryan Shawcross                        133         56
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                                       045  Dimitar Berbatov                      161         71
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       166  Marouane Fellaini                     168         73
                    886    10 GK       037  Asmir Begovic                         154         56
                              DF       024  Leighton Baines                       173         78
                                       160  Patrice Evra                          152         73
                                       272  Sanchez Jose Enrique                  133         61
                              FW       488  Luis Suarez                           213        105
                                       298  Rickie Lambert                        178         69
                                       045  Dimitar Berbatov                      161         71
                              MF       027  Gareth Bale                           240        111
                                       452  Santi Santi Cazorla                   198         97
                                       193  Steven Gerrard                        187         92
                                       166  Marouane Fellaini                     168         73

110 rows selected.

Elapsed: 00:00:01.38

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
Pop_Table_Iterate_Base_Link
old   2:   Item_Cat_Seqs.Pop_Table_Iterate_Base_Link(p_keep_num      => &KEEP_NUM,
new   2:   Item_Cat_Seqs.Pop_Table_Iterate_Base_Link(p_keep_num      => 0,
old   3:                                             p_min_value     => &MIN_VALUE);
new   3:                                             p_min_value     => 1952);
10 running sums
SQL_ID  4sxxvubzws1vx, child number 0
-------------------------------------
INSERT /*+ gather_plan_statistics INSERT_IBL */ INTO PATHS_BASE_LINK (
PATH_RNK, ITEM_RNK, LEV, TOT_PRICE, TOT_VALUE, CAT_BASE_ID,
NEXT_CAT_BASE_ID, SAME_CATS, MIN_ITEMS, CAT_BASE_SUM, PRIOR_IBL_ID,
IBL_ID ) WITH PATH_JOIN AS ( SELECT ROW_NUMBER() OVER (PARTITION BY
TRW.CAT_BASE_SUM + IRK.CAT_BASE_ID ORDER BY TRW.TOT_VALUE +
IRK.ITEM_VALUE DESC, TRW.TOT_PRICE + IRK.ITEM_PRICE) PATH_RNK,
IRK.ITEM_RNK, :B7 LEV, TRW.TOT_PRICE + IRK.ITEM_PRICE TOT_PRICE,
TRW.TOT_VALUE + IRK.ITEM_VALUE TOT_VALUE, IRK.CAT_BASE_ID,
IRK.NEXT_CAT_BASE_ID, CASE IRK.CAT_BASE_ID WHEN TRW.CAT_BASE_ID THEN
TRW.SAME_CATS + 1 ELSE 1 END SAME_CATS, IRK.MIN_ITEMS, TRW.CAT_BASE_SUM
+ IRK.CAT_BASE_ID CAT_BASE_SUM, TRW.IBL_ID FROM PATHS_BASE_LINK TRW
JOIN ITEMS_RANKED_BASE_LINK IRK ON IRK.ITEM_RNK BETWEEN (TRW.ITEM_RNK +
1) AND (:B2 - (:B1 - TRW.LEV - 1)) WHERE TRW.TOT_PRICE + IRK.ITEM_PRICE
+ :B6 <= :B5 AND TRW.TOT_VALUE + IRK.ITEM_VALUE + :B4 >= :B3 AND
TRW.LEV < :B1 AND CASE IRK.CAT_BASE_ID WHEN TRW.CAT_BASE_ID THEN TRW
Plan hash value: 66749355
----------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                | Name               | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem | Used-Tmp|
----------------------------------------------------------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT         |                    |      1 |        |      0 |00:00:36.92 |     895K|       |       |          |         |
|   1 |  LOAD TABLE CONVENTIONAL | PATHS_BASE_LINK    |      1 |        |      0 |00:00:36.92 |     895K|       |       |          |         |
|   2 |   SEQUENCE               | IBL_SEQ            |      1 |        |    389K|00:00:36.66 |     877K|       |       |          |         |
|*  3 |    VIEW                  |                    |      1 |      1 |    389K|00:00:36.10 |     877K|       |       |          |         |
|   4 |     WINDOW SORT          |                    |      1 |      1 |    389K|00:00:35.92 |     877K|    55M|  2592K|   48M (0)|         |
|   5 |      NESTED LOOPS        |                    |      1 |      1 |    389K|00:00:08.31 |     877K|       |       |          |         |
|*  6 |       TABLE ACCESS FULL  | PATHS_BASE_LINK    |      1 |      1 |    864K|00:00:00.13 |    9606 |       |       |          |         |
|*  7 |       INDEX RANGE SCAN   | SYS_IOT_TOP_177219 |    864K|      1 |    389K|00:00:33.01 |     867K|       |       |          |         |
----------------------------------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
3 - filter(("PATH_RNK"<=:B8 OR :B8=0))
6 - filter("TRW"."LEV"<:B1)
7 - access("IRK"."ITEM_RNK">="TRW"."ITEM_RNK"+1 AND "IRK"."ITEM_RNK"<=:B2-(:B1-"TRW"."LEV"-1))
filter(("TRW"."TOT_PRICE"+"IRK"."ITEM_PRICE"+:B6<=:B5 AND "TRW"."TOT_VALUE"+"IRK"."ITEM_VALUE"+:B4>=:B3 AND
"IRK"."MAX_ITEMS">=CASE "IRK"."CAT_BASE_ID" WHEN "TRW"."CAT_BASE_ID" THEN "TRW"."SAME_CATS"+1 ELSE 1 END  AND
"IRK"."MIN_REMAIN"<=:B1-("TRW"."LEV"+1)+LEAST(CASE "IRK"."CAT_BASE_ID" WHEN "TRW"."CAT_BASE_ID" THEN "TRW"."SAME_CATS"+1 ELSE 1 END
,"IRK"."MIN_ITEMS") AND ("IRK"."CAT_BASE_ID"="TRW"."CAT_BASE_ID" OR "TRW"."SAME_CATS">="TRW"."MIN_ITEMS") AND
("IRK"."CAT_BASE_ID"="TRW"."CAT_BASE_ID" OR "IRK"."CAT_BASE_ID"=NVL("TRW"."NEXT_CAT_BASE_ID","IRK"."CAT_BASE_ID"))))
Note
-----
- dynamic statistics used: dynamic sampling (level=2)
Timer Set: Pop_Table_Iterate_Base_Link, Constructed at 10 Jun 2024 23:43:19, written at 23:44:42
================================================================================================
Timer                                   Elapsed         CPU       Calls       Ela/Call       CPU/Call
-----------------------------------  ----------  ----------  ----------  -------------  -------------
Initial delete (0)                         0.01        0.01           1        0.01200        0.01000
Initial insert (1)                         0.00        0.00           1        0.00000        0.00000
Insert item_base_links  1 (1)              0.00        0.00           1        0.00100        0.00000
Insert paths_base_Link 1 (17)              0.00        0.00           1        0.00100        0.00000
Delete paths_base_Link 1 (1)               0.00        0.00           1        0.00000        0.00000
Insert item_base_links  2 (17)             0.00        0.00           1        0.00000        0.00000
Insert paths_base_Link 2 (290)             0.01        0.01           1        0.00500        0.01000
Delete paths_base_Link 2 (17)              0.00        0.00           1        0.00000        0.00000
Insert item_base_links  3 (290)            0.00        0.00           1        0.00000        0.00000
Insert paths_base_Link 3 (553)             0.04        0.02           1        0.04200        0.02000
Delete paths_base_Link 3 (290)             0.00        0.00           1        0.00000        0.00000
Insert item_base_links  4 (553)            0.00        0.00           1        0.00100        0.00000
Insert paths_base_Link 4 (279)             0.07        0.09           1        0.06600        0.09000
Delete paths_base_Link 4 (553)             0.00        0.00           1        0.00100        0.00000
Insert item_base_links  5 (279)            0.00        0.00           1        0.00000        0.00000
Insert paths_base_Link 5 (1252)            0.04        0.02           1        0.04000        0.02000
Delete paths_base_Link 5 (279)             0.00        0.00           1        0.00000        0.00000
Insert item_base_links  6 (1252)           0.00        0.00           1        0.00100        0.00000
Insert paths_base_Link 6 (15349)           0.16        0.17           1        0.15500        0.17000
Delete paths_base_Link 6 (1252)            0.00        0.00           1        0.00100        0.00000
Insert item_base_links  7 (15349)          0.01        0.01           1        0.00500        0.01000
Insert paths_base_Link 7 (110100)          1.26        1.26           1        1.26100        1.26000
Delete paths_base_Link 7 (15349)           0.01        0.01           1        0.01000        0.01000
Insert item_base_links  8 (110100)         0.03        0.03           1        0.03400        0.03000
Insert paths_base_Link 8 (460638)          6.75        6.72           1        6.74800        6.72000
Delete paths_base_Link 8 (110100)          0.06        0.06           1        0.05800        0.06000
Insert item_base_links  9 (460638)         0.13        0.13           1        0.12900        0.13000
Insert paths_base_Link 9 (864748)         21.91       21.24           1       21.91200       21.24000
Delete paths_base_Link 9 (460638)          0.25        0.22           1        0.25200        0.22000
Insert item_base_links  10 (864748)        0.30        0.30           1        0.29500        0.30000
Insert paths_base_Link 10 (389615)        37.15       36.83           1       37.14800       36.83000
Delete paths_base_Link 10 (864748)         0.37        0.36           1        0.37400        0.36000
Insert item_base_links  11 (389615)        0.15        0.13           1        0.14800        0.13000
Insert paths_base_Link 11 (50)            14.52       14.42           1       14.51500       14.42000
Delete paths_base_Link 11 (389615)         0.23        0.21           1        0.23200        0.21000
(Other)                                    0.00        0.00           1        0.00000        0.00000
-----------------------------------  ----------  ----------  ----------  -------------  -------------
Total                                     83.45       82.25          36        2.31797        2.28472
-----------------------------------  ----------  ----------  ----------  -------------  -------------
[Timer timed (per call in ms): Elapsed: 0.01052, CPU: 0.01146]

PL/SQL procedure successfully completed.

Elapsed: 00:01:23.56

Path                              Total Value Total Price  Rank
--------------------------------- ----------- ----------- -----
037024160463488298027452193344166        1965         889     1
037024160264488298045027452193166                     890     2
037024160463488298044027452193344        1963         890     3
037024160463488298044027452193166        1962         884     4
037024160264488298314027452193166                     885     5
037024160272488298044027452193166                     889     6
252024160264488298044027452193166        1959         889     7
037024160463488298045027452193344        1958         887     8
037024160463488298045027452193166        1957         881     9
037024160272488298045027452193166                     886    10

10 rows selected.

Elapsed: 00:00:01.32

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
old   2:   Item_Cat_Seqs.Init(p_keep_num      => &KEEP_NUM,
new   2:   Item_Cat_Seqs.Init(p_keep_num      => 0,
old   3:                      p_min_value     => &MIN_VALUE);
new   3:                      p_min_value     => 1952);
10 running sums

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
Array_Iterate

Path                              Total Value Total Price  Rank
--------------------------------- ----------- ----------- -----
037024160463488298027452193344166        1965         889     1
037024160264488298045027452193166                     890     2
037024160463488298044027452193344        1963         890     3
037024160463488298044027452193166        1962         884     4
037024160264488298314027452193166                     885     5
037024160272488298044027452193166                     889     6
252024160264488298044027452193166        1959         889     7
037024160463488298045027452193344        1958         887     8
037024160463488298045027452193166        1957         881     9
037024160463488298314027452328166                     886    10

10 rows selected.

SQL_ID  1xxa6th1dk8zu, child number 0
-------------------------------------
WITH PATH_JOIN AS ( SELECT /*+ gather_plan_statistics ARRAY_ITERATE */
ROW_NUMBER() OVER (PARTITION BY TRW.CATS_PATH || IRK.CAT_ID ORDER BY
TRW.TOT_VALUE + IRK.ITEM_VALUE DESC, TRW.TOT_PRICE + IRK.ITEM_PRICE)
PATH_RNK, IRK.ITEM_RNK, TRW.LEV + 1 LEV, TRW.TOT_PRICE + IRK.ITEM_PRICE
TOT_PRICE, TRW.TOT_VALUE + IRK.ITEM_VALUE TOT_VALUE, IRK.CAT_ID,
IRK.NEXT_CAT_ID, CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN TRW.SAME_CATS + 1
ELSE 1 END SAME_CATS, IRK.MIN_ITEMS, TRW.CATS_PATH || IRK.CAT_ID
CATS_PATH, TRW.PATH || IRK.ITEM_ID PATH FROM TABLE(:B1 ) TRW JOIN
ITEMS_RANKED IRK ON IRK.ITEM_RNK BETWEEN (TRW.ITEM_RNK + 1) AND
(IRK.N_ITEMS - (:B2 - TRW.LEV - 1)) WHERE TRW.TOT_PRICE +
IRK.ITEM_PRICE + :B6 <= :B5 AND TRW.TOT_VALUE + IRK.ITEM_VALUE + :B4 >=
:B3 AND TRW.LEV < :B2 AND CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN
TRW.SAME_CATS + 1 ELSE 1 END <= IRK.MAX_ITEMS AND :B2 - (TRW.LEV + 1) +
LEAST(CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN TRW.SAME_CATS + 1 ELSE 1
END, IRK.MIN_ITEMS) >= IRK.MIN_REMAIN AND (IRK.CAT_ID
Plan hash value: 1740109178
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                            | Name               | Starts | E-Rows | A-Rows |   A-Time   | Buffers | Reads  | Writes |  OMem |  1Mem | Used-Mem | Used-Tmp|
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                     |                    |      1 |        |    389K|00:00:51.12 |     874K|   9797 |   9797 |       |       |          |         |
|*  1 |  VIEW                                |                    |      1 |      1 |    389K|00:00:51.12 |     874K|   9797 |   9797 |       |       |          |         |
|   2 |   WINDOW SORT                        |                    |      1 |      1 |    389K|00:00:50.87 |     874K|   9797 |   9797 |    86M|  3186K| 5045K (1)|      77M|
|   3 |    NESTED LOOPS                      |                    |      1 |      1 |    389K|00:00:06.91 |     874K|      0 |      0 |       |       |          |         |
|*  4 |     COLLECTION ITERATOR PICKLER FETCH|                    |      1 |      1 |    864K|00:00:01.10 |       0 |      0 |      0 |       |       |          |         |
|*  5 |     INDEX RANGE SCAN                 | SYS_IOT_TOP_177213 |    864K|      1 |    389K|00:00:45.69 |     874K|      0 |      0 |       |       |          |         |
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
1 - filter(("PATH_RNK"<=:B7 OR :B7=0))
4 - filter(VALUE(KOKBF$)<:B2)
5 - access("IRK"."ITEM_RNK">=VALUE(KOKBF$)+1)
filter((VALUE(KOKBF$)+"IRK"."ITEM_PRICE"+:B6<=:B5 AND VALUE(KOKBF$)+"IRK"."ITEM_VALUE"+:B4>=:B3 AND "IRK"."ITEM_RNK"<="IRK"."N_ITEMS"-(:B2-VALUE(KOKBF$)-1)
AND ("IRK"."CAT_ID"=VALUE(KOKBF$) OR "IRK"."CAT_ID"=NVL(VALUE(KOKBF$),"IRK"."CAT_ID")) AND "IRK"."MAX_ITEMS">=CASE "IRK"."CAT_ID" WHEN VALUE(KOKBF$) THEN
VALUE(KOKBF$)+1 ELSE 1 END  AND ("IRK"."CAT_ID"=VALUE(KOKBF$) OR VALUE(KOKBF$)>=VALUE(KOKBF$)) AND "IRK"."MIN_REMAIN"<=:B2-(VALUE(KOKBF$)+1)+LEAST(CASE
"IRK"."CAT_ID" WHEN VALUE(KOKBF$) THEN VALUE(KOKBF$)+1 ELSE 1 END ,"IRK"."MIN_ITEMS")))
Note
-----
- dynamic statistics used: dynamic sampling (level=2)
Timer Set: Array_Iterate, Constructed at 10 Jun 2024 23:44:44, written at 23:46:40
==================================================================================
Timer                    Elapsed         CPU       Calls       Ela/Call       CPU/Call
--------------------  ----------  ----------  ----------  -------------  -------------
Insert 1 (17)               0.00        0.00           1        0.00000        0.00000
Reset paths array 1         0.00        0.00           1        0.00000        0.00000
Insert 2 (290)              0.01        0.00           1        0.00500        0.00000
Reset paths array 2         0.00        0.00           1        0.00000        0.00000
Insert 3 (553)              0.04        0.04           1        0.04300        0.04000
Reset paths array 3         0.00        0.00           1        0.00000        0.00000
Insert 4 (279)              0.08        0.06           1        0.07600        0.06000
Reset paths array 4         0.00        0.00           1        0.00000        0.00000
Insert 5 (1252)             0.04        0.05           1        0.04100        0.05000
Reset paths array 5         0.00        0.00           1        0.00100        0.00000
Insert 6 (15349)            0.20        0.21           1        0.19600        0.21000
Reset paths array 6         0.01        0.01           1        0.01100        0.01000
Insert 7 (110100)           1.53        1.47           1        1.52600        1.47000
Reset paths array 7         0.07        0.07           1        0.07200        0.07000
Insert 8 (460638)           8.84        8.51           1        8.83700        8.51000
Reset paths array 8         0.34        0.30           1        0.33600        0.30000
Insert 9 (864748)          30.28       28.28           1       30.27500       28.28000
Reset paths array 9         0.55        0.52           1        0.55100        0.52000
Insert 10 (1)              51.58       50.55           1       51.57900       50.55000
Reset paths array 10        0.27        0.22           1        0.26900        0.22000
Insert 11 (50)             21.82       21.70           1       21.82100       21.70000
Pipe rows                   0.00        0.00           1        0.00100        0.00000
(Other)                     0.00        0.00           1        0.00000        0.00000
--------------------  ----------  ----------  ----------  -------------  -------------
Total                     115.64      111.99          23        5.02783        4.86913
--------------------  ----------  ----------  ----------  -------------  -------------
[Timer timed (per call in ms): Elapsed: 0.00901, CPU: 0.00901]
Elapsed: 00:01:55.78

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00
Pop_Table_Recurse
old   2:   Item_Cat_Seqs.Pop_Table_Recurse(p_keep_num      => &KEEP_NUM,
new   2:   Item_Cat_Seqs.Pop_Table_Recurse(p_keep_num      => 0,
old   3:                                   p_min_value     => &MIN_VALUE);
new   3:                                   p_min_value     => 1952);
10 running sums
SQL_ID  323bar13mrwwy, child number 0
-------------------------------------
INSERT /*+ gather_plan_statistics INSERT_PATHS */ INTO PATHS (
PATH_RNK, ITEM_RNK, LEV, TOT_PRICE, TOT_VALUE, CAT_ID, NEXT_CAT_ID,
SAME_CATS, MIN_ITEMS, CATS_PATH, PATH ) WITH PATH_JOIN AS ( SELECT
ROW_NUMBER() OVER (PARTITION BY TRW.CATS_PATH || IRK.CAT_ID ORDER BY
TRW.TOT_VALUE + IRK.ITEM_VALUE DESC, TRW.TOT_PRICE + IRK.ITEM_PRICE)
PATH_RNK, IRK.ITEM_RNK, :B6 LEV, TRW.TOT_PRICE + IRK.ITEM_PRICE
TOT_PRICE, TRW.TOT_VALUE + IRK.ITEM_VALUE TOT_VALUE, IRK.CAT_ID,
IRK.NEXT_CAT_ID, CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN TRW.SAME_CATS + 1
ELSE 1 END SAME_CATS, IRK.MIN_ITEMS, TRW.CATS_PATH || IRK.CAT_ID
CATS_PATH, TRW.PATH || IRK.ITEM_ID PATH FROM PATHS TRW JOIN
ITEMS_RANKED IRK ON IRK.ITEM_RNK BETWEEN (TRW.ITEM_RNK + 1) AND
(IRK.N_ITEMS - (:B1 - TRW.LEV - 1)) WHERE TRW.TOT_PRICE +
IRK.ITEM_PRICE + :B5 <= :B4 AND TRW.TOT_VALUE + IRK.ITEM_VALUE + :B3 >=
:B2 AND TRW.LEV < :B1 AND CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN
TRW.SAME_CATS + 1 ELSE 1 END <= IRK.MAX_ITEMS AND :B1 - (TRW.LEV + 1) +
LEAST(CAS
Plan hash value: 2684864324
----------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                | Name               | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem | Used-Tmp|
----------------------------------------------------------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT         |                    |      1 |        |      0 |00:00:36.16 |     922K|       |       |          |         |
|   1 |  LOAD TABLE CONVENTIONAL | PATHS              |      1 |        |      0 |00:00:36.16 |     922K|       |       |          |         |
|*  2 |   VIEW                   |                    |      1 |      1 |    389K|00:00:35.94 |     890K|       |       |          |         |
|   3 |    WINDOW SORT           |                    |      1 |      1 |    389K|00:00:35.76 |     890K|    82M|  3117K|   73M (0)|         |
|   4 |     NESTED LOOPS         |                    |      1 |      1 |    389K|00:00:12.54 |     890K|       |       |          |         |
|*  5 |      TABLE ACCESS FULL   | PATHS              |      1 |      1 |    864K|00:00:00.15 |   16167 |       |       |          |         |
|*  6 |      INDEX RANGE SCAN    | SYS_IOT_TOP_177213 |    864K|      1 |    389K|00:00:32.73 |     874K|       |       |          |         |
----------------------------------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
2 - filter(("PATH_RNK"<=:B7 OR :B7=0))
5 - filter("TRW"."LEV"<:B1)
6 - access("IRK"."ITEM_RNK">="TRW"."ITEM_RNK"+1)
filter(("TRW"."TOT_PRICE"+"IRK"."ITEM_PRICE"+:B5<=:B4 AND "TRW"."TOT_VALUE"+"IRK"."ITEM_VALUE"+:B3>=:B2 AND
"IRK"."ITEM_RNK"<="IRK"."N_ITEMS"-(:B1-"TRW"."LEV"-1) AND "IRK"."MAX_ITEMS">=CASE "IRK"."CAT_ID" WHEN "TRW"."CAT_ID" THEN
"TRW"."SAME_CATS"+1 ELSE 1 END  AND "IRK"."MIN_REMAIN"<=:B1-("TRW"."LEV"+1)+LEAST(CASE "IRK"."CAT_ID" WHEN "TRW"."CAT_ID" THEN
"TRW"."SAME_CATS"+1 ELSE 1 END ,"IRK"."MIN_ITEMS") AND ("IRK"."CAT_ID"="TRW"."CAT_ID" OR "TRW"."SAME_CATS">="TRW"."MIN_ITEMS") AND
("IRK"."CAT_ID"="TRW"."CAT_ID" OR "IRK"."CAT_ID"=NVL("TRW"."NEXT_CAT_ID","IRK"."CAT_ID"))))
Note
-----
- dynamic statistics used: dynamic sampling (level=2)
Timer Set: Pop_Table_Recurse, Constructed at 10 Jun 2024 23:46:40, written at 23:48:02
======================================================================================
Timer                        Elapsed         CPU       Calls       Ela/Call       CPU/Call
------------------------  ----------  ----------  ----------  -------------  -------------
Initial delete (50)             0.04        0.03           1        0.04200        0.03000
Initial insert (1)              0.00        0.00           1        0.00000        0.00000
Insert paths 1 (17)             0.04        0.05           1        0.03600        0.05000
Delete paths 1 (1)              0.04        0.03           1        0.03600        0.03000
Insert paths 2 (290)            0.04        0.03           1        0.03800        0.03000
Delete paths 2 (17)             0.04        0.05           1        0.03600        0.05000
Insert paths 3 (553)            0.07        0.06           1        0.07100        0.06000
Delete paths 3 (290)            0.04        0.02           1        0.03500        0.02000
Insert paths 4 (279)            0.09        0.09           1        0.08800        0.09000
Delete paths 4 (553)            0.04        0.05           1        0.03500        0.05000
Insert paths 5 (1252)           0.07        0.06           1        0.06600        0.06000
Delete paths 5 (279)            0.04        0.02           1        0.03500        0.02000
Insert paths 6 (15349)          0.15        0.17           1        0.15400        0.17000
Delete paths 6 (1252)           0.04        0.04           1        0.03600        0.04000
Insert paths 7 (110100)         1.11        1.11           1        1.11200        1.11000
Delete paths 7 (15349)          0.05        0.05           1        0.05200        0.05000
Insert paths 8 (460638)         6.20        6.16           1        6.19600        6.16000
Delete paths 8 (110100)         0.11        0.11           1        0.10600        0.11000
Insert paths 9 (864748)        21.62       20.90           1       21.61700       20.90000
Delete paths 9 (460638)         0.42        0.27           1        0.41700        0.27000
Insert paths 10 (389615)       36.37       36.03           1       36.37100       36.03000
Delete paths 10 (864748)        0.60        0.52           1        0.59900        0.52000
Insert paths 11 (50)           14.87       14.75           1       14.87100       14.75000
Delete paths 11 (389615)        0.28        0.26           1        0.28000        0.26000
(Other)                         0.00        0.00           1        0.00100        0.00000
------------------------  ----------  ----------  ----------  -------------  -------------
Total                          82.33       80.86          25        3.29320        3.23440
------------------------  ----------  ----------  ----------  -------------  -------------
[Timer timed (per call in ms): Elapsed: 0.00926, CPU: 0.00926]

PL/SQL procedure successfully completed.

Elapsed: 00:01:22.49

Path                              Total Value Total Price  Rank
--------------------------------- ----------- ----------- -----
037024160463488298027452193344166        1965         889     1
037024160264488298045027452193166                     890     2
037024160463488298044027452193344        1963         890     3
037024160463488298044027452193166        1962         884     4
037024160264488298314027452193166                     885     5
037024160272488298044027452193166                     889     6
252024160264488298044027452193166        1959         889     7
037024160463488298045027452193344        1958         887     8
037024160463488298045027452193166        1957         881     9
037024160272488298045027452193166                     886    10

10 rows selected.

Elapsed: 00:00:00.06

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00
old   2:   Item_Cat_Seqs.Init(p_keep_num      => &KEEP_NUM,
new   2:   Item_Cat_Seqs.Init(p_keep_num      => 0,
old   3:                      p_min_value     => &MIN_VALUE);
new   3:                      p_min_value     => 1952);
10 running sums

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
Array_Recurse

Path                              Total Value Total Price  Rank
--------------------------------- ----------- ----------- -----
037024160463488298027452193344166        1965         889     1
037024160264488298045027452193166                     890     2
037024160463488298044027452193344        1963         890     3
037024160463488298044027452193166        1962         884     4
037024160264488298314027452193166                     885     5
037024160272488298044027452193166                     889     6
252024160264488298044027452193166        1959         889     7
037024160463488298045027452193344        1958         887     8
037024160463488298045027452193166        1957         881     9
037024160463488298314027452328166                     886    10

10 rows selected.

SQL_ID  3s128ufk13m2r, child number 0
-------------------------------------
WITH PATH_JOIN AS ( SELECT /*+ gather_plan_statistics ARRAY_RECURSE */
ROW_NUMBER() OVER (PARTITION BY TRW.CATS_PATH || IRK.CAT_ID ORDER BY
TRW.TOT_VALUE + IRK.ITEM_VALUE DESC, TRW.TOT_PRICE + IRK.ITEM_PRICE)
PATH_RNK, IRK.ITEM_RNK, TRW.LEV + 1 LEV, TRW.TOT_PRICE + IRK.ITEM_PRICE
TOT_PRICE, TRW.TOT_VALUE + IRK.ITEM_VALUE TOT_VALUE, IRK.CAT_ID,
IRK.NEXT_CAT_ID, CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN TRW.SAME_CATS + 1
ELSE 1 END SAME_CATS, IRK.MIN_ITEMS, TRW.CATS_PATH || IRK.CAT_ID
CATS_PATH, TRW.PATH || IRK.ITEM_ID PATH FROM
ITEM_CAT_SEQS.ARRAY_RECURSE(P_TIMER_SET => :B1 , P_LEV => NVL(:B2 , :B3
) - 1) TRW JOIN ITEMS_RANKED IRK ON IRK.ITEM_RNK BETWEEN (TRW.ITEM_RNK
+ 1) AND (IRK.N_ITEMS - (:B3 - TRW.LEV - 1)) WHERE TRW.TOT_PRICE +
IRK.ITEM_PRICE + :B7 <= :B6 AND TRW.TOT_VALUE + IRK.ITEM_VALUE + :B5 >=
:B4 AND TRW.LEV < :B3 AND CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN
TRW.SAME_CATS + 1 ELSE 1 END <= IRK.MAX_ITEMS AND :B3 - (TRW.LEV + 1) +
LEAST(CASE IRK.CAT_ID WHEN TRW.CAT_ID THEN TRW.SAME_CAT
Plan hash value: 4226761357
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                             | Name               | Starts | E-Rows | A-Rows |   A-Time   | Buffers | Reads  | Writes |  OMem |  1Mem | Used-Mem | Used-Tmp|
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                      |                    |      1 |        |    389K|00:01:51.12 |      75 |  18012 |  18012 |       |       |          |         |
|*  1 |  VIEW                                 |                    |      1 |      1 |    389K|00:01:51.12 |      75 |  18012 |  18012 |       |       |          |         |
|   2 |   WINDOW SORT                         |                    |      1 |      1 |    389K|00:01:50.88 |      75 |  18012 |  18012 |    80M|  3082K|   71M (0)|         |
|   3 |    MERGE JOIN                         |                    |      1 |      1 |    389K|00:00:54.06 |      75 |  18012 |  18012 |       |       |          |         |
|   4 |     SORT JOIN                         |                    |      1 |    408 |    864K|00:00:49.43 |      68 |  18012 |  18012 |   104M|  3482K|   92M (0)|         |
|*  5 |      COLLECTION ITERATOR PICKLER FETCH| ARRAY_RECURSE      |      1 |    408 |    864K|00:00:55.05 |      68 |  18012 |  18012 |       |       |          |         |
|*  6 |     FILTER                            |                    |    864K|        |    389K|00:00:57.04 |       7 |      0 |      0 |       |       |          |         |
|*  7 |      SORT JOIN                        |                    |    864K|    560 |    193M|00:00:34.17 |       7 |      0 |      0 |   124K|   124K|  110K (0)|         |
|   8 |       INDEX FAST FULL SCAN            | SYS_IOT_TOP_177213 |      1 |    560 |    560 |00:00:00.01 |       7 |      0 |      0 |       |       |          |         |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
1 - filter(("PATH_RNK"<=:B8 OR :B8=0))
5 - filter(VALUE(KOKBF$)<:B3)
6 - filter((VALUE(KOKBF$)+"IRK"."ITEM_PRICE"+:B7<=:B6 AND VALUE(KOKBF$)+"IRK"."ITEM_VALUE"+:B5>=:B4 AND "IRK"."ITEM_RNK"<="IRK"."N_ITEMS"-(:B3-VALUE(KOKBF$)-1)
AND ("IRK"."CAT_ID"=VALUE(KOKBF$) OR "IRK"."CAT_ID"=NVL(VALUE(KOKBF$),"IRK"."CAT_ID")) AND "IRK"."MAX_ITEMS">=CASE "IRK"."CAT_ID" WHEN VALUE(KOKBF$) THEN
VALUE(KOKBF$)+1 ELSE 1 END  AND ("IRK"."CAT_ID"=VALUE(KOKBF$) OR VALUE(KOKBF$)>=VALUE(KOKBF$)) AND "IRK"."MIN_REMAIN"<=:B3-(VALUE(KOKBF$)+1)+LEAST(CASE
"IRK"."CAT_ID" WHEN VALUE(KOKBF$) THEN VALUE(KOKBF$)+1 ELSE 1 END ,"IRK"."MIN_ITEMS")))
7 - access("IRK"."ITEM_RNK">=VALUE(KOKBF$)+1)
filter("IRK"."ITEM_RNK">=VALUE(KOKBF$)+1)
Note
-----
- dynamic statistics used: dynamic sampling (level=2)
Timer Set: Array_Recurse, Constructed at 10 Jun 2024 23:48:02, written at 23:50:22
==================================================================================
Timer                          Elapsed         CPU       Calls       Ela/Call       CPU/Call
--------------------------  ----------  ----------  ----------  -------------  -------------
Recurse level: 1 (17)             0.00        0.00           1        0.00100        0.00000
Recurse level: 2 (290)            0.01        0.00           1        0.00600        0.00000
Recurse level: 3 (553)            0.06        0.04           1        0.05500        0.04000
Recurse level: 4 (279)            0.09        0.09           1        0.09000        0.09000
Recurse level: 5 (1252)           0.05        0.05           1        0.05400        0.05000
Recurse level: 6 (15349)          0.22        0.21           1        0.21700        0.21000
Recurse level: 7 (110100)         1.78        1.79           1        1.78300        1.79000
Recurse level: 8 (460638)        10.38       10.31           1       10.37500       10.31000
Recurse level: 9 (864748)        36.30       35.77           1       36.29900       35.77000
Recurse level: 10 (389615)       63.21       62.56           1       63.21000       62.56000
Recurse level: 11 (50)           27.47       27.23           1       27.46800       27.23000
(Other)                           0.00        0.00           1        0.00000        0.00000
--------------------------  ----------  ----------  ----------  -------------  -------------
Total                           139.56      138.05          12       11.62983       11.50417
--------------------------  ----------  ----------  ----------  -------------  -------------
[Timer timed (per call in ms): Elapsed: 0.00885, CPU: 0.00885]
Elapsed: 00:02:19.67

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00
Timer Set: Item_Cat_Seqs, Constructed at 10 Jun 2024 23:39:03, written at 23:50:22
==================================================================================
Timer                                   Elapsed         CPU       Calls       Ela/Call       CPU/Call
-----------------------------------  ----------  ----------  ----------  -------------  -------------
Pop_Table_Iterate                         80.87       78.89           1       80.87200       78.89000
Solutions by Category                      0.05        0.03           1        0.04700        0.03000
Pop_Table_Iterate_Base                    87.28       82.65           1       87.27900       82.65000
Pop_Table_Iterate_Link                    86.37       84.77           1       86.37100       84.77000
Pop_Table_Iterate_Link - item level        1.40        1.38           1        1.40300        1.38000
Pop_Table_Iterate_Base_Link               84.90       83.68           1       84.90300       83.68000
Array_Iterate                            115.81      112.15           1      115.80500      112.15000
Pop_Table_Recurse                         82.56       81.07           1       82.55600       81.07000
Array_Recurse                            139.69      138.17           1      139.69200      138.17000
(Other)                                    0.00        0.01           1        0.00200        0.01000
-----------------------------------  ----------  ----------  ----------  -------------  -------------
Total                                    678.93      662.80          10       67.89300       66.28000
-----------------------------------  ----------  ----------  ----------  -------------  -------------
[Timer timed (per call in ms): Elapsed: 0.01099, CPU: 0.00989]

PL/SQL procedure successfully completed.


'END:'||TO_CHAR(SYSDATE,'DD-MON-YY
----------------------------------
End: 10-JUN-2024 23:50:22

